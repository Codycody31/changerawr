datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  password          String
  name              String?
  role              Role               @default(STAFF)
  refreshTokens     RefreshToken[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  lastLoginAt       DateTime?
  settings          Settings?
  staffRequests     ChangelogRequest[] @relation("StaffRequests")
  adminResponses    ChangelogRequest[] @relation("AdminResponses")
  ApiKey            ApiKey[]
  auditLogs         AuditLog[]         @relation("AuditLogUser")
  targetAuditLogs   AuditLog[]         @relation("AuditLogTarget")
  oauthConnections  OAuthConnection[]
  passwordResets    PasswordReset[]
  passkeys          Passkey[]
  lastChallenge     String?
  twoFactorMode     TwoFactorMode?     @default(NONE)
  twoFactorSessions TwoFactorSession[]
}

model RefreshToken {
  id          String   @id @default(cuid())
  token       String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  invalidated Boolean  @default(false)

  @@index([userId])
}

model OAuthProvider {
  id               String   @id @default(cuid())
  name             String
  clientId         String
  clientSecret     String
  authorizationUrl String
  tokenUrl         String
  userInfoUrl      String
  callbackUrl      String
  scopes           String[]
  enabled          Boolean  @default(true)
  isDefault        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  connections OAuthConnection[]
}

model OAuthConnection {
  id             String        @id @default(cuid())
  providerId     String
  provider       OAuthProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerUserId String
  accessToken    String?
  refreshToken   String?
  expiresAt      DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([providerId, providerUserId])
  @@unique([providerId, userId])
  @@index([userId])
  @@index([providerId])
}

model Settings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme               String   @default("light")
  enableNotifications Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([userId])
}

model InvitationLink {
  id        String    @id @default(cuid())
  token     String    @unique
  role      Role
  email     String
  createdBy String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([token])
  @@index([email])
}

model Project {
  id                  String                     @id @default(cuid())
  name                String
  isPublic            Boolean                    @default(false)
  allowAutoPublish    Boolean                    @default(false)
  requireApproval     Boolean                    @default(true)
  defaultTags         String[]                   @default([])
  changelog           Changelog?
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  changelogRequests   ChangelogRequest[]
  emailConfig         EmailConfig?
  emailLogs           EmailLog[]
  ProjectSubscription ProjectSubscription[]
  gitHubIntegration   GitHubIntegration?
  gitLabIntegration   GitLabIntegration?
  analyticsViews      PublicChangelogAnalytics[]
}

model Passkey {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String // User-friendly name for the passkey
  credentialId String    @unique
  publicKey    String // Base64 encoded public key
  counter      Int       @default(0)
  transports   String[] // Transport types (usb, nfc, ble, internal)
  createdAt    DateTime  @default(now())
  lastUsedAt   DateTime?

  @@index([userId])
  @@index([credentialId])
}

model Changelog {
  id        String           @id @default(cuid())
  project   Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String           @unique
  entries   ChangelogEntry[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model ChangelogEntry {
  id             String                     @id @default(cuid())
  title          String
  content        String                     @db.Text
  version        String?
  publishedAt    DateTime?
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  tags           ChangelogTag[]
  changelog      Changelog                  @relation(fields: [changelogId], references: [id], onDelete: Cascade)
  changelogId    String
  requests       ChangelogRequest[]
  analyticsViews PublicChangelogAnalytics[]

  @@index([changelogId])
}

model ChangelogTag {
  id        String             @id @default(cuid())
  name      String             @unique
  entries   ChangelogEntry[]
  requests  ChangelogRequest[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model ChangelogRequest {
  id               String          @id @default(cuid())
  type             String // DELETE_PROJECT, DELETE_TAG, DELETE_ENTRY
  status           String          @default("PENDING") // PENDING, APPROVED, REJECTED
  staffId          String? // Made nullable to allow user deletion
  staff            User?           @relation("StaffRequests", fields: [staffId], references: [id], onDelete: SetNull)
  adminId          String?
  admin            User?           @relation("AdminResponses", fields: [adminId], references: [id], onDelete: SetNull)
  projectId        String
  project          Project         @relation(fields: [projectId], references: [id])
  targetId         String? // For specific items being deleted (e.g., tag id)
  createdAt        DateTime        @default(now())
  reviewedAt       DateTime?
  ChangelogEntry   ChangelogEntry? @relation(fields: [changelogEntryId], references: [id])
  changelogEntryId String?
  ChangelogTag     ChangelogTag?   @relation(fields: [changelogTagId], references: [id])
  changelogTagId   String?

  @@index([staffId])
  @@index([adminId])
  @@index([projectId])
  @@index([status])
}

model ApiKey {
  id          String    @id @default(cuid())
  name        String
  key         String    @unique
  lastUsed    DateTime?
  createdAt   DateTime  @default(now())
  expiresAt   DateTime?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  permissions String[] // Array of permitted actions
  isRevoked   Boolean   @default(false)

  @@index([userId])
  @@index([key])
}

model AuditLog {
  id           String   @id @default(cuid())
  action       String
  userId       String? // Nullable to allow user deletion
  targetUserId String?
  details      Json?
  createdAt    DateTime @default(now())
  user         User?    @relation("AuditLogUser", fields: [userId], references: [id], onDelete: SetNull)
  targetUser   User?    @relation("AuditLogTarget", fields: [targetUserId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([targetUserId])
  @@index([action])
  @@index([createdAt])
}

model SystemConfig {
  id                            Int      @id @default(1)
  defaultInvitationExpiry       Int      @default(7)
  requireApprovalForChangelogs  Boolean  @default(true)
  maxChangelogEntriesPerProject Int      @default(100)
  enableAnalytics               Boolean  @default(true)
  enableNotifications           Boolean  @default(true)
  enablePasswordReset           Boolean  @default(false)
  enableAIAssistant             Boolean  @default(false) // Enable/disable AI assistant globally
  aiApiKey                      String? // Global API key for AI service
  aiApiProvider                 String?  @default("secton") // AI provider
  aiDefaultModel                String?  @default("copilot-zero") // Default model to use
  aiApiBaseUrl                  String?
  smtpHost                      String?
  smtpPort                      Int?
  smtpUser                      String?
  smtpPassword                  String?
  smtpSecure                    Boolean?
  systemEmail                   String?
  updatedAt                     DateTime @updatedAt
}

model EmailConfig {
  id             String    @id @default(cuid())
  projectId      String    @unique
  project        Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  enabled        Boolean   @default(false)
  smtpHost       String
  smtpPort       Int
  smtpUser       String?
  smtpPassword   String?
  smtpSecure     Boolean   @default(true)
  fromEmail      String
  fromName       String?
  replyToEmail   String?
  defaultSubject String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastTestedAt   DateTime?
  testStatus     String? // "success", "failed", error message
}

model EmailLog {
  id         String   @id @default(cuid())
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  recipients String[]
  subject    String
  messageId  String?
  type       String // "SINGLE_UPDATE" or "DIGEST"
  entryIds   String[]
  createdAt  DateTime @default(now())
}

model EmailSubscriber {
  id               String                @id @default(cuid())
  email            String
  name             String?
  isActive         Boolean               @default(true)
  unsubscribeToken String                @unique
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  lastEmailSentAt  DateTime?
  subscriptions    ProjectSubscription[]

  @@unique([email])
  @@index([email])
  @@index([unsubscribeToken])
}

model ProjectSubscription {
  id               String           @id @default(cuid())
  projectId        String
  project          Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  subscriberId     String
  subscriber       EmailSubscriber  @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  subscriptionType SubscriptionType @default(ALL_UPDATES)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@unique([projectId, subscriberId])
  @@index([projectId])
  @@index([subscriberId])
}

model PasswordReset {
  id        String    @id @default(cuid())
  token     String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     String
  expiresAt DateTime
  createdAt DateTime  @default(now())
  usedAt    DateTime?

  @@index([token])
  @@index([userId])
  @@index([email])
}

model TwoFactorSession {
  id        String        @id @default(cuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      TwoFactorMode
  expiresAt DateTime
  createdAt DateTime      @default(now())

  @@index([userId])
  @@index([expiresAt])
}

model GitHubIntegration {
  id                     String    @id @default(cuid())
  projectId              String    @unique
  project                Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  repositoryUrl          String
  accessToken            String // Encrypted access token
  defaultBranch          String    @default("main")
  lastSyncAt             DateTime?
  lastCommitSha          String?
  includeBreakingChanges Boolean   @default(true)
  includeFixes           Boolean   @default(true)
  includeFeatures        Boolean   @default(true)
  includeChores          Boolean   @default(false)
  customCommitTypes      String[]  @default([])
  enabled                Boolean   @default(true)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  @@index([projectId])
  @@index([enabled])
}

model GitLabIntegration {
  id                     String    @id @default(cuid())
  projectId              String    @unique
  project                Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  repositoryUrl          String
  accessToken            String // Encrypted access token
  defaultBranch          String    @default("main")
  lastSyncAt             DateTime?
  lastCommitSha          String?
  includeBreakingChanges Boolean   @default(true)
  includeFixes           Boolean   @default(true)
  includeFeatures        Boolean   @default(true)
  includeChores          Boolean   @default(false)
  customCommitTypes      String[]  @default([])
  enabled                Boolean   @default(true)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  @@index([projectId])
  @@index([enabled])
}

model PublicChangelogAnalytics {
  id               String   @id @default(cuid())
  projectId        String
  changelogEntryId String?
  ipHash           String // Hashed IP for privacy
  country          String? // Country from IP geolocation
  userAgent        String? // Browser info
  referrer         String? // Referring URL
  viewedAt         DateTime @default(now())
  sessionHash      String // Session identifier for unique visits

  // Relations
  project        Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  changelogEntry ChangelogEntry? @relation(fields: [changelogEntryId], references: [id], onDelete: SetNull)

  @@index([projectId])
  @@index([changelogEntryId])
  @@index([viewedAt])
  @@index([country])
  @@index([sessionHash])
}

enum Role {
  ADMIN
  STAFF
  VIEWER
}

enum RequestType {
  DELETE_ENTRY
  DELETE_TAG
  DELETE_PROJECT
  ALLOW_PUBLISH
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum emailType {
  SINGLE_UPDATE
  DIGEST
}

enum SubscriptionType {
  ALL_UPDATES // Receive all updates
  MAJOR_ONLY // Only receive major version updates
  DIGEST_ONLY // Only receive digest emails
}

enum TwoFactorMode {
  NONE // No additional security
  PASSKEY_PLUS_PASSWORD // Passkey login requires password
  PASSWORD_PLUS_PASSKEY // Password login requires passkey
}
