import React from "react";

interface ProviderLogoProps {
    providerName: string
    size?: "sm" | "md" | "lg"
}

export const ProviderLogo: React.FC<ProviderLogoProps> = ({providerName, size = "md"}) => {
    // Calculate size classes based on the size prop
    const sizeClasses = {
        sm: "w-6 h-6",
        md: "w-8 h-8",
        lg: "w-10 h-10"
    }

    const iconSizes = {
        sm: 14,
        md: 18,
        lg: 20
    }

    // Normalize provider name for lookup
    const normalizedName = providerName.toLowerCase()

    // Render provider logo based on the name
    if (normalizedName === 'easypanel') {
        return (
            <div className={`${sizeClasses[size]} rounded-md flex items-center justify-center text-primary`}>
                <svg width="100%" height="100%" viewBox="0 0 84 83" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <g clipPath="url(#clip0_3198_32507)">
                        <path
                            d="M40.4278 56.5316C37.7545 56.5316 35.2145 55.3644 33.4736 53.3358L11.3931 27.6051L2.22541 49.3065C0.863584 52.5302 1.45665 56.2479 3.75384 58.8878L21.5371 79.3243C23.2775 81.3246 25.7988 82.4727 28.45 82.4727H54.9487C58.6367 82.4727 61.965 80.262 63.3953 76.8631L71.9496 56.5316H40.4278Z"
                            fill="url(#paint0_linear_3198_32507)"/>
                        <path
                            d="M43.5229 25.941C46.1906 25.941 48.7259 27.1035 50.4666 29.125L72.6346 54.8677L81.7368 33.1564C83.0861 29.9374 82.4897 26.2312 80.1984 23.5981L62.4038 3.14831C60.6635 1.14828 58.1423 2.83976e-05 55.491 2.58119e-05L29.0241 0C25.3203 -3.61217e-06 21.9806 2.22967 20.5606 5.65052L12.1382 25.941H43.5229Z"
                            fill="url(#paint1_linear_3198_32507)"/>
                    </g>
                    <defs>
                        <linearGradient id="paint0_linear_3198_32507" x1="38.7226" y1="24.3596" x2="39.2942" y2="94.996"
                                        gradientUnits="userSpaceOnUse">
                            <stop stopColor="#0BA864"/>
                            <stop offset="1" stopColor="#19BFBF"/>
                        </linearGradient>
                        <linearGradient id="paint1_linear_3198_32507" x1="50.7816" y1="-3.24546" x2="51.3544"
                                        y2="67.3909" gradientUnits="userSpaceOnUse">
                            <stop stopColor="#0BA864"/>
                            <stop offset="1" stopColor="#19BFBF"/>
                        </linearGradient>
                        <clipPath id="clip0_3198_32507">
                            <rect width="100%" height="100%" fill="white"/>
                        </clipPath>
                    </defs>
                </svg>
            </div>
        )
    } else if (normalizedName === 'github') {
        return (
            <div className={`${sizeClasses[size]} rounded-md bg-slate-900 flex items-center justify-center text-white`}>
                <svg viewBox="0 0 24 24" width={iconSizes[size]} height={iconSizes[size]} stroke="currentColor"
                     strokeWidth="2" fill="none" strokeLinecap="round" strokeLinejoin="round">
                    <path
                        d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"/>
                </svg>
            </div>
        )
    } else if (normalizedName === 'google') {
        return (
            <div className={`${sizeClasses[size]} rounded-md bg-white border flex items-center justify-center`}>
                <svg viewBox="0 0 24 24" width={iconSizes[size]} height={iconSizes[size]}>
                    <path
                        d="M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z"
                        fill="#4285F4"/>
                </svg>
            </div>
        )
    } else if (normalizedName === 'auth0') {
        return (
            <div className={`${sizeClasses[size]} rounded-md bg-orange-50 flex items-center justify-center`}>
                <div
                    className={`${size === "sm" ? "w-3 h-3" : size === "md" ? "w-4 h-4" : "w-6 h-6"} rounded-full bg-orange-500`}></div>
            </div>
        )
    } else if (normalizedName === 'okta') {
        return (
            <div
                className={`${sizeClasses[size]} rounded-md bg-blue-50 flex items-center justify-center text-blue-600`}>
                <svg viewBox="0 0 24 24" width={iconSizes[size]} height={iconSizes[size]} stroke="currentColor"
                     strokeWidth="2" fill="none" strokeLinecap="round" strokeLinejoin="round">
                    <circle cx="12" cy="12" r="10"/>
                    <circle cx="12" cy="12" r="4"/>
                </svg>
            </div>
        )
    } else if (normalizedName === 'pocketid') {
        return (
            <div
                className={`${sizeClasses[size]} rounded-md bg-blue-50 flex items-center justify-center text-blue-600`}>
                <svg viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" width={iconSizes[size]} height={iconSizes[size]}>
                    <g transform="scale(0.125)">
                        <path d="M0 0 C1.22240387 -0.00852997 2.44480774 -0.01705994 3.70425415 -0.02584839 C5.0560304 -0.02514938 6.40780655 -0.02422633 7.75958252 -0.02310181 C9.18560132 -0.02908737 10.61161687 -0.03589298 12.03762817 -0.04345703 C15.90972313 -0.06112467 19.78172968 -0.06581282 23.65386105 -0.0670886 C26.07480474 -0.06851069 28.495726 -0.07278145 30.91666412 -0.07808304 C39.36789882 -0.09658807 47.81907043 -0.10475334 56.27032471 -0.10317993 C64.13881545 -0.10197942 72.0070315 -0.12306266 79.87545276 -0.15466726 C86.63739901 -0.1808562 93.39925571 -0.19154608 100.16125226 -0.19026911 C104.19690178 -0.18976011 108.23230733 -0.19540854 112.26790619 -0.21662521 C116.06668745 -0.23605112 119.8649932 -0.23610277 123.66379166 -0.22159195 C125.05369133 -0.21950789 126.4436211 -0.22418075 127.83346939 -0.23631287 C139.69821631 -0.33312596 146.28346497 2.07529934 155.04962158 10.17758179 C157.75025927 13.02736712 159.33021801 15.7316911 161.03009033 19.26742554 C161.38680124 19.8713274 161.74351215 20.47522926 162.11103249 21.09743118 C163.3042125 23.91465743 163.28786842 26.17883227 163.29751587 29.23733521 C163.31031082 31.07094101 163.31031082 31.07094101 163.32336426 32.94158936 C163.32266525 34.29336561 163.3217422 35.64514176 163.32061768 36.99691772 C163.32660323 38.42293652 163.33340885 39.84895208 163.3409729 41.27496338 C163.35864054 45.14705833 163.36332869 49.01906489 163.36460447 52.89119625 C163.36602656 55.31213995 163.37029732 57.73306121 163.37559891 60.15399933 C163.39410394 68.60523402 163.40226921 77.05640563 163.4006958 85.50765991 C163.39949529 93.37615066 163.42057853 101.2443667 163.45218313 109.11278796 C163.47837207 115.87473421 163.48906195 122.63659091 163.48778498 129.39858747 C163.48727598 133.43423698 163.49292441 137.46964254 163.51414108 141.50524139 C163.53356699 145.30402265 163.53361864 149.10232841 163.51910782 152.90112686 C163.51702376 154.29102654 163.52169662 155.68095631 163.53382874 157.0708046 C163.63064183 168.93555152 161.22221653 175.52080017 153.11993408 184.28695679 C150.27014875 186.98759447 147.56582477 188.56755321 144.03009033 190.26742554 C143.42618847 190.62413645 142.82228661 190.98084736 142.20008469 191.34836769 C139.38285843 192.5415477 137.1186836 192.52520363 134.06018066 192.53485107 C132.22657486 192.54764603 132.22657486 192.54764603 130.35592651 192.56069946 C129.00415026 192.56000045 127.65237411 192.5590774 126.30059814 192.55795288 C124.87457935 192.56393844 123.44856379 192.57074405 122.02255249 192.57830811 C118.15045754 192.59597575 114.27845098 192.60066389 110.40631962 192.60193968 C107.98537592 192.60336177 105.56445466 192.60763253 103.14351654 192.61293411 C94.69228185 192.63143915 86.24111024 192.63960441 77.78985596 192.63803101 C69.92136521 192.63683049 62.05314917 192.65791373 54.18472791 192.68951833 C47.42278166 192.71570727 40.66092496 192.72639716 33.8989284 192.72512019 C29.86327888 192.72461118 25.82787333 192.73025962 21.79227448 192.75147629 C17.99349322 192.77090219 14.19518746 192.77095385 10.39638901 192.75644302 C9.00648933 192.75435896 7.61655956 192.75903183 6.22671127 192.77116394 C-5.63803565 192.86797704 -12.22328431 190.45955173 -20.98944092 182.35726929 C-23.69007861 179.50748396 -25.27003734 176.80315997 -26.96990967 173.26742554 C-27.32662058 172.66352367 -27.68333149 172.05962181 -28.05085182 171.43741989 C-29.24403183 168.62019364 -29.22768776 166.3560188 -29.23733521 163.29751587 C-29.24586517 162.075112 -29.25439514 160.85270813 -29.26318359 159.59326172 C-29.26248459 158.24148547 -29.26156153 156.88970931 -29.26043701 155.53793335 C-29.26642257 154.11191455 -29.27322818 152.68589899 -29.28079224 151.2598877 C-29.29845988 147.38779274 -29.30314802 143.51578619 -29.30442381 139.64365482 C-29.3058459 137.22271113 -29.31011666 134.80178987 -29.31541824 132.38085175 C-29.33392328 123.92961705 -29.34208854 115.47844544 -29.34051514 107.02719116 C-29.33931462 99.15870042 -29.36039786 91.29048437 -29.39200246 83.42206311 C-29.4181914 76.66011686 -29.42888129 69.89826016 -29.42760432 63.13626361 C-29.42709531 59.10061409 -29.43274375 55.06520853 -29.45396042 51.02960968 C-29.47338632 47.23082842 -29.47343798 43.43252267 -29.45892715 39.63372421 C-29.45684309 38.24382454 -29.46151596 36.85389477 -29.47364807 35.46404648 C-29.57046117 23.59929956 -27.16203586 17.0140509 -19.05975342 8.24789429 C-16.20996809 5.5472566 -13.5056441 3.96729786 -9.96990967 2.26742554 C-9.3660078 1.91071463 -8.76210594 1.55400372 -8.13990402 1.18648338 C-5.32267777 -0.00669663 -3.05850293 0.00964745 0 0 Z" fill="#040707" transform="translate(28.96990966796875,-0.267425537109375)"/>
                        <path d="M0 0 C69.15867003 0 69.15867003 0 86.60546875 16.3203125 C96.2607962 27.12545871 100.6588566 40.1036397 100.28125 54.515625 C99.09555807 69.2050306 92.6403778 80.94218717 82 91 C75.97607376 95.9592323 69.10089652 101 61 101 C59.15135737 93.85751712 57.41626671 86.68704743 55.75 79.5 C55.56276367 78.72285645 55.37552734 77.94571289 55.18261719 77.14501953 C53.6605808 70.47337821 53.6605808 70.47337821 55 67 C55.928125 66.443125 56.85625 65.88625 57.8125 65.3125 C62.54142834 61.88170885 64.35238285 57.58171936 65.3828125 51.8828125 C65.67786326 46.8276094 64.2577339 42.79148692 61 39 C57.08312453 35.42607676 53.31213672 33.67738317 48 33.375 C42.70291537 33.68467572 38.84385735 35.33327893 35 39 C31.51693504 43.70312162 30.25350858 48.13471025 31 54 C33.12803967 60.49612109 36.3592823 64.23952153 42 68 C41.67381545 74.14126771 41.07899677 80.06545141 39.6875 86.0625 C38.07994321 93.13890194 36.98907922 100.25885726 35.9375 107.4375 C35.77531982 108.54424072 35.61313965 109.65098145 35.44604492 110.79125977 C34.23281433 119.18661851 33.12120708 127.5909469 32 136 C21.44 136 10.88 136 0 136 C0 91.12 0 46.24 0 0 Z" fill="#FBFBFB" transform="translate(51,28)"/>
                    </g>
                </svg>

            </div>
        )
    } else {
        // Default fallback for unknown providers
        return (
            <div
                className={`${sizeClasses[size]} rounded-md bg-secondary flex items-center justify-center text-secondary-foreground`}>
                <span
                    className={size === "sm" ? "text-xs font-semibold" : size === "md" ? "text-sm font-semibold" : "text-lg font-semibold"}>
                    {providerName.substring(0, 2).toUpperCase()}
                </span>
            </div>
        )
    }
}
